import { Component, OnInit } from '@angular/core';
import { ActivatedRoute } from "@angular/router";
import { AuthService } from '../../services/auth.service';
import { MessageService } from '../../services/message.service';
import { AngularFireDatabase } from 'angularfire2/database';
import { messageModel } from '../../models/message.model';

@Component({
  selector: 'app-direct-message',
  templateUrl: './direct-message.component.html',
  styleUrls: ['./direct-message.component.css']
})
export class DirectMessageComponent implements OnInit {
  message: string;
  user2Id: any;
  authId: any;
  activeRouteUser1Id: any;
  messageDisplayData: messageModel[];
  receiverName: any;
  receiverData: any;
  constructor(private authService: AuthService,
              private messageService: MessageService,
              private db: AngularFireDatabase,
              private activeRoute: ActivatedRoute) { }

  ngOnInit() {
    this.messageService.currentUser2Id.subscribe(data => {
      this.user2Id = data; // the id of the second user whom the logged in user is chatting
      this.authId = this.authService.currentUserId; // this is the user unique authentication id 
      let path;
      // the if block is basically when a user reloads the page and no user 2 id is 
      // passed to which we subscribed, so we retreive the ids from the url for that session
      // the route is generated by messageService.getPath() method.
      // we are making use of these ids to get the path to the database list of userMessages
      // without the postKey that is appended in the above mentioned method
      if(data === undefined || data === "") {
        this.activeRouteUser1Id = this.activeRoute.snapshot.params['user1'];
        this.user2Id = this.activeRoute.snapshot.params['user2'];
        path = this.getMessageDatabasePath(this.activeRouteUser1Id, this.user2Id);
      }  
      else {
       this.user2Id = data;
       this.authId = this.authService.currentUserId;
       path = this.getMessageDatabasePath(this.authId, this.user2Id);
       this.getReceiverUserName(this.user2Id);
      }    
      console.log("Direct Message Fetch Path " + path);
      this.getDirectMessages(path);
    });
  }

  sendMessage() {
    this.messageService.storeDirectMessage(this.user2Id, this.message);
    this.message = '';
    // this.messageService.storeDirectMessage(user1, this.message);
  }

  getDirectMessages(path: any) {
    console.log('PATH:::: ' + path);
    this.db.list(path).valueChanges().subscribe(messageData => {
      this.messageDisplayData = messageData;
      console.log('The messages are ' + this.messageDisplayData[0].message);
    });
  }

  // We cannot make use of getPath method from MessageService 
  // because its appends a post key at the end which we don't need
  getMessageDatabasePath(user1Id: any, user2Id: any) {
    let path;       
        if(user1Id < user2Id) {
            console.log('User2Id is greater');
            path = 'userMessages/'+user2Id + '/' + user1Id;
            return path;
        }
        else if(user1Id > user2Id) {
            console.log('this.authstate.uid is greater');
            path = 'userMessages/' + user1Id + '/' + user2Id;
            return path;
        }
        else if(user1Id === user2Id) {
            // console.log('They both are equal');
            path = 'userMessages/' + user1Id + '/' + user2Id;
            return path;
        }
  }

  getReceiverUserName(receiverId: any) {
    const path = `/users/${receiverId}`;
    this.db.object(path).valueChanges().subscribe(data => {
      this.receiverData = data;
      this.receiverName = this.receiverData.displayName;
      console.log('The Receiver Name is ' + this.receiverName);
    })
  }

}
